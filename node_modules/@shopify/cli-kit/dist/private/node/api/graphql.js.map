{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../../../../src/private/node/api/graphql.ts"],"names":[],"mappings":"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","sourcesContent":["import {buildHeaders, httpsAgent, RequestClientError, sanitizedHeadersOutput} from './headers.js'\nimport {stringifyMessage, content, token as outputToken, token, debug} from '../../../output.js'\nimport {AbortError} from '../../../public/node/error.js'\nimport {ClientError, GraphQLClient, RequestDocument, Variables} from 'graphql-request'\nimport {performance} from 'perf_hooks'\n\nexport interface GraphQLVariables {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n}\n\nexport function graphqlRequest<T>(\n  query: RequestDocument,\n  api: string,\n  url: string,\n  token: string,\n  variables?: Variables,\n  handleErrors = true,\n): Promise<T> {\n  const action = async () => {\n    const headers = buildHeaders(token)\n    debugLogRequest(api, query, variables, headers)\n    const clientOptions = {agent: await httpsAgent(), headers}\n    const client = new GraphQLClient(url, clientOptions)\n    const t0 = performance.now()\n    const response = await client.request<T>(query, variables)\n    const t1 = performance.now()\n    debug(`Request to ${url.toString()} completed in ${Math.round(t1 - t0)} ms`)\n    return response\n  }\n\n  if (handleErrors) {\n    return handlingErrors(api, action)\n  } else {\n    return action()\n  }\n}\n\nfunction debugLogRequest<T>(\n  api: string,\n  query: RequestDocument,\n  variables?: Variables,\n  headers: {[key: string]: string} = {},\n) {\n  debug(content`\nSending ${token.json(api)} GraphQL request:\n${token.raw(query.toString())}\n\nWith variables:\n${variables ? JSON.stringify(variables, null, 2) : ''}\n\nAnd headers:\n${sanitizedHeadersOutput(headers)}\n`)\n}\n\nasync function handlingErrors<T>(api: string, action: () => Promise<T>): Promise<T> {\n  try {\n    return await action()\n  } catch (error) {\n    if (error instanceof ClientError) {\n      const errorMessage = stringifyMessage(content`\n  The ${token.raw(\n    api,\n  )} GraphQL API responded unsuccessfully with the HTTP status ${`${error.response.status}`} and errors:\n\n  ${outputToken.json(error.response.errors)}\n      `)\n      let mappedError: Error\n      if (error.response.status < 500) {\n        mappedError = new RequestClientError(errorMessage, error.response.status)\n      } else {\n        mappedError = new AbortError(errorMessage)\n      }\n      mappedError.stack = error.stack\n      throw mappedError\n    } else {\n      throw error\n    }\n  }\n}\n"]}