import { TextAnimation } from './TextAnimation.js';
import useLayout from '../hooks/use-layout.js';
import useAsyncAndUnmount from '../hooks/use-async-and-unmount.js';
// import {environment} from '@shopify/cli-kit'
import { Box, Text } from 'ink';
import React, { useRef, useState } from 'react';
const loadingBarChar = 'â–€';
var TasksState;
(function (TasksState) {
    TasksState["Loading"] = "loading";
    TasksState["Success"] = "success";
    TasksState["Failure"] = "failure";
})(TasksState || (TasksState = {}));
function Tasks({ tasks, silent = false }) {
    const { twoThirds } = useLayout();
    const loadingBar = new Array(twoThirds).fill(loadingBarChar).join('');
    const [currentTask, setCurrentTask] = useState(tasks[0]);
    const [state, setState] = useState(TasksState.Loading);
    const ctx = useRef({});
    const runTasks = async () => {
        for (const task of tasks) {
            setCurrentTask(task);
            // eslint-disable-next-line no-await-in-loop
            const result = await task.task(ctx.current);
            if (Array.isArray(result) && result.length > 0 && result.every((el) => 'task' in el)) {
                for (const subTask of result) {
                    setCurrentTask(subTask);
                    // eslint-disable-next-line no-await-in-loop
                    await subTask.task(ctx.current);
                }
            }
        }
    };
    useAsyncAndUnmount(runTasks, {
        onFulfilled: () => setState(TasksState.Success),
        onRejected: () => setState(TasksState.Failure),
    });
    if (silent) {
        return null;
    }
    return state === TasksState.Loading ? (React.createElement(Box, { flexDirection: "column" },
        React.createElement(TextAnimation, { text: loadingBar }),
        React.createElement(Text, null,
            currentTask.title,
            " ..."))) : null;
}
export { Tasks };
//# sourceMappingURL=Tasks.js.map