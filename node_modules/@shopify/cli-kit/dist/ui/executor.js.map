{"version":3,"file":"executor.js","sourceRoot":"","sources":["../../src/ui/executor.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,wBAAwB,EAAE,kBAAkB,EAAE,gBAAgB,EAAC,MAAM,0BAA0B,CAAA;AAEvG,MAAM,CAAC,KAAK,UAAU,GAAG,CAAC,QAAkB;IAC1C,IAAI,cAAc,CAAA;IAElB,QAAQ,QAAQ,CAAC,IAAI,EAAE;QACrB,KAAK,OAAO;YACV,cAAc,GAAG;gBACf,GAAG,QAAQ;gBACX,YAAY,EAAE,QAAQ,CAAC,OAAO;gBAC9B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBACzB,CAAC,CAAC,CAAC,KAAa,EAAE,EAAE;wBAChB,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAS,CAAC,KAAK,CAAC,CAAA;wBACvC,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAA;oBACtD,CAAC;oBACH,CAAC,CAAC,SAAS;aACd,CAAA;YAED,OAAO,gBAAgB,CAAC,cAAc,CAAC,CAAA;QACzC,KAAK,UAAU;YACb,cAAc,GAAG;gBACf,GAAG,QAAQ;gBACX,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBACzB,CAAC,CAAC,CAAC,KAAa,EAAE,EAAE;wBAChB,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAS,CAAC,KAAK,CAAC,CAAA;wBACvC,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAA;oBACtD,CAAC;oBACH,CAAC,CAAC,SAAS;aACd,CAAA;YAED,OAAO,gBAAgB,CAAC,cAAc,CAAC,CAAA;QACzC,KAAK,QAAQ;YACX,cAAc,GAAG;gBACf,GAAG,QAAQ;gBACX,YAAY,EAAE,QAAQ,CAAC,OAAO;gBAC9B,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;oBACvC,OAAO;wBACL,KAAK,EAAE,MAAM,CAAC,IAAI;wBAClB,KAAK,EAAE,MAAM,CAAC,KAAK;wBACnB,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI;qBAC1B,CAAA;gBACH,CAAC,CAAC;aACH,CAAA;YAED,OAAO,kBAAkB,CAAC,cAAc,CAAC,CAAA;QAC3C,KAAK,cAAc,CAAC,CAAC;YACnB,cAAc,GAAG;gBACf,GAAG,QAAQ;gBACX,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;oBACvC,OAAO;wBACL,KAAK,EAAE,MAAM,CAAC,IAAI;wBAClB,KAAK,EAAE,MAAM,CAAC,KAAK;qBACpB,CAAA;gBACH,CAAC,CAAC;aACH,CAAA;YAED,OAAO,wBAAwB,CAAC,cAAc,CAAC,CAAA;SAChD;KACF;AACH,CAAC","sourcesContent":["import {Question} from '../ui.js'\nimport {renderAutocompletePrompt, renderSelectPrompt, renderTextPrompt} from '@shopify/cli-kit/node/ui'\n\nexport async function run(question: Question): Promise<string> {\n  let mappedQuestion\n\n  switch (question.type) {\n    case 'input':\n      mappedQuestion = {\n        ...question,\n        defaultValue: question.default,\n        validate: question.validate\n          ? (value: string) => {\n              const error = question.validate!(value)\n              return typeof error === 'string' ? error : undefined\n            }\n          : undefined,\n      }\n\n      return renderTextPrompt(mappedQuestion)\n    case 'password':\n      mappedQuestion = {\n        ...question,\n        password: true,\n        validate: question.validate\n          ? (value: string) => {\n              const error = question.validate!(value)\n              return typeof error === 'string' ? error : undefined\n            }\n          : undefined,\n      }\n\n      return renderTextPrompt(mappedQuestion)\n    case 'select':\n      mappedQuestion = {\n        ...question,\n        defaultValue: question.default,\n        choices: question.choices.map((choice) => {\n          return {\n            label: choice.name,\n            value: choice.value,\n            group: choice.group?.name,\n          }\n        }),\n      }\n\n      return renderSelectPrompt(mappedQuestion)\n    case 'autocomplete': {\n      mappedQuestion = {\n        ...question,\n        choices: question.choices.map((choice) => {\n          return {\n            label: choice.name,\n            value: choice.value,\n          }\n        }),\n      }\n\n      return renderAutocompletePrompt(mappedQuestion)\n    }\n  }\n}\n"]}