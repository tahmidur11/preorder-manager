{"version":3,"file":"trigger.js","sourceRoot":"","sources":["../../../../src/cli/prompts/webhook/trigger.ts"],"names":[],"mappings":"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","sourcesContent":["import {DELIVERY_METHOD, isAddressAllowedForDeliveryMethod} from '../../services/webhook/trigger-options.js'\nimport {ui, output} from '@shopify/cli-kit'\nimport {renderAutocompletePrompt} from '@shopify/cli-kit/node/ui'\n\nexport async function topicPrompt(availableTopics: string[]): Promise<string> {\n  const choicesList = availableTopics.map((topic) => ({label: topic, value: topic}))\n\n  const chosen = await renderAutocompletePrompt({\n    message: 'Webhook Topic',\n    choices: choicesList,\n  })\n\n  return chosen\n}\n\nexport async function apiVersionPrompt(availableVersions: string[]): Promise<string> {\n  const choices = availableVersions.map((version) => ({name: version, value: version}))\n\n  const input = await ui.prompt([\n    {\n      type: 'select',\n      name: 'apiVersion',\n      message: 'Webhook ApiVersion',\n      choices,\n    },\n  ])\n\n  return input.apiVersion\n}\n\nexport async function deliveryMethodPrompt(): Promise<string> {\n  const choices = [\n    {name: 'HTTP', value: DELIVERY_METHOD.HTTP},\n    {name: 'Google Pub/Sub', value: DELIVERY_METHOD.PUBSUB},\n    {name: 'Amazon EventBridge', value: DELIVERY_METHOD.EVENTBRIDGE},\n  ]\n\n  const input = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'Delivery method',\n      choices,\n    },\n  ])\n\n  return input.value\n}\n\nexport async function addressPrompt(deliveryMethod: string): Promise<string> {\n  const input = await ui.prompt([\n    {\n      type: 'input',\n      name: 'address',\n      message: 'Address for delivery',\n      default: '',\n      validate: (value) => {\n        const trimmed = value.trim()\n        if (trimmed.length === 0) {\n          return \"Address can't be empty\"\n        }\n        if (isAddressAllowedForDeliveryMethod(trimmed, deliveryMethod)) {\n          return true\n        }\n\n        return `Invalid address.\\n${deliveryMethodInstructionsAsString(deliveryMethod)}`\n      },\n    },\n  ])\n\n  return input.address.trim()\n}\n\nexport async function sharedSecretPrompt(): Promise<string> {\n  const input = await ui.prompt([\n    {\n      type: 'input',\n      name: 'sharedSecret',\n      message:\n        'Shared Secret to encode the webhook payload. If you are using the app template, this is your Client Secret, which can be found in the partners dashboard',\n      default: 'shopify_test',\n      validate: (value: string) => {\n        if (value.length === 0) {\n          return \"Shared Secret can't be empty\"\n        }\n        return true\n      },\n    },\n  ])\n\n  return input.sharedSecret\n}\n\nexport function deliveryMethodInstructions(method: string): string[] {\n  if (method === DELIVERY_METHOD.HTTP) {\n    return [\n      `For remote HTTP testing, use a URL that starts with https://`,\n      `For local HTTP testing, use http://localhost:{port}/{url-path}`,\n    ]\n  }\n  if (method === DELIVERY_METHOD.PUBSUB) {\n    return [`For Google Pub/Sub, use pubsub://{project-id}:{topic-id}`]\n  }\n  if (method === DELIVERY_METHOD.EVENTBRIDGE) {\n    return [`For Amazon EventBridge, use an Amazon Resource Name (ARN) starting with arn:aws:events:`]\n  }\n\n  return []\n}\n\nexport function deliveryMethodInstructionsAsString(method: string): string {\n  return deliveryMethodInstructions(method)\n    .map((hint) => `      Â· ${output.stringifyMessage(hint)}`)\n    .join('\\n')\n}\n"]}