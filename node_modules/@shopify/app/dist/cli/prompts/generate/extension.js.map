{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/prompts/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {extensionTypesGroups} from '../../constants.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {GenericSpecification} from '../../models/app/extensions.js'\nimport {ui} from '@shopify/cli-kit'\nimport {generateRandomNameForSubdirectory} from '@shopify/cli-kit/node/fs'\n\ninterface GenerateExtensionOptions {\n  name?: string\n  extensionType?: string\n  extensionFlavor?: string\n  directory: string\n  app: AppInterface\n  extensionSpecifications: GenericSpecification[]\n  reset: boolean\n}\n\ninterface GenerateExtensionOutput {\n  name: string\n  extensionType: string\n  extensionFlavor?: string\n}\n\nexport const extensionFlavorQuestion = (specification: GenericSpecification): ui.Question => {\n  return {\n    type: 'select',\n    name: 'extensionFlavor',\n    message: 'What would you like to work in?',\n    choices: specification.supportedFlavors,\n    default: 'react',\n  }\n}\n\nexport function buildChoices(specifications: GenericSpecification[]) {\n  return specifications\n    .map((type) => {\n      const choiceWithoutGroup = {\n        name: type.externalName,\n        value: type.identifier,\n      }\n      const group = extensionTypesGroups.find((group) => includes(group.extensions, type.identifier))\n      if (group) {\n        return {\n          ...choiceWithoutGroup,\n          group: {\n            name: group.name,\n            order: extensionTypesGroups.indexOf(group),\n          },\n        }\n      }\n      return choiceWithoutGroup\n    })\n    .sort((c1, c2) => c1.name.localeCompare(c2.name))\n}\n\nconst generateExtensionPrompt = async (\n  options: GenerateExtensionOptions,\n  prompt = ui.prompt,\n): Promise<GenerateExtensionOutput> => {\n  const questions: ui.Question<'name' | 'extensionType'>[] = []\n\n  let allExtensions = options.extensionSpecifications\n\n  if (!options.extensionType) {\n    if (options.extensionFlavor) {\n      const flavor = options.extensionFlavor\n      allExtensions = allExtensions.filter((spec) => spec.supportedFlavors.map((elem) => elem.value).includes(flavor))\n    }\n\n    questions.push({\n      type: 'select',\n      name: 'extensionType',\n      message: 'Type of extension?',\n      choices: buildChoices(allExtensions),\n    })\n  }\n  if (!options.name) {\n    questions.push({\n      type: 'input',\n      name: 'name',\n      message: \"Your extension's working name?\",\n      default: await generateRandomNameForSubdirectory({suffix: 'ext', directory: options.directory}),\n    })\n  }\n  let promptOutput: GenerateExtensionOutput = await prompt(questions)\n  const extensionType = {...options, ...promptOutput}.extensionType\n  const specification = options.extensionSpecifications.find((spec) => spec.identifier === extensionType)!\n  if (!options.extensionFlavor && specification.supportedFlavors.length > 1) {\n    promptOutput = {\n      ...promptOutput,\n      extensionFlavor: (\n        (await prompt([\n          extensionFlavorQuestion(specification),\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ])) as any\n      ).extensionFlavor,\n    }\n  }\n  return {...options, ...promptOutput}\n}\n\nfunction includes<TNarrow extends TWide, TWide>(coll: ReadonlyArray<TNarrow>, el: TWide): el is TNarrow {\n  return coll.includes(el as TNarrow)\n}\n\nexport default generateExtensionPrompt\n"]}