{"version":3,"file":"dev.js","sourceRoot":"","sources":["../../../src/cli/prompts/dev.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,eAAe,EAAC,MAAM,0BAA0B,CAAA;AACxD,OAAO,EAAC,MAAM,EAAE,EAAE,EAAC,MAAM,kBAAkB,CAAA;AAC3C,OAAO,EAAC,wBAAwB,EAAE,kBAAkB,EAAC,MAAM,0BAA0B,CAAA;AAErF,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,aAA6B;IAC1E,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QAC9B,OAAO,aAAa,CAAC,CAAC,CAAE,CAAA;KACzB;IACD,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,YAAY,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAC,CAAC,CAAC,CAAA;IACrF,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC;QAC7B;YACE,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,+CAA+C;YACxD,OAAO,EAAE,OAAO;SACjB;KACF,CAAC,CAAA;IACF,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAE,CAAA;AAC3D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,IAA8B,EAAE,KAAa,EAAE,KAAa;IAChG,MAAM,QAAQ,GAAG,CAAC,GAA2B,EAAE,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAC,CAAC,CAAA;IACzF,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAElC,OAAO,wBAAwB,CAAC;QAC9B,OAAO,EAAE,iCAAiC;QAC1C,OAAO,EAAE,OAAO;QAChB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;YACrB,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;YAExD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAClC,CAAC;KACF,CAAC,CAAA;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,MAA2B;IACjE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,SAAS,CAAA;IACzC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,MAAM,CAAC,SAAS,CAAC,iCAAiC,MAAM,CAAC,CAAC,CAAE,CAAC,QAAQ,4BAA4B,CAAC,CAAA;QAClG,OAAO,MAAM,CAAC,CAAC,CAAC,CAAA;KACjB;IACD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,EAAC,CAAC,CAAC,CAAA;IAEtF,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC;QAC7B;YACE,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,qEAAqE;YAC9E,OAAO,EAAE,SAAS;SACnB;KACF,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC,CAAA;AAC3D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa;IACjC,MAAM,OAAO,GAAG;QACd,EAAC,IAAI,EAAE,oDAAoD,EAAE,KAAK,EAAE,QAAQ,EAAC;QAC7E,EAAC,IAAI,EAAE,kDAAkD,EAAE,KAAK,EAAE,QAAQ,EAAC;KAC5E,CAAA;IAED,MAAM,MAAM,GAAiC,MAAM,EAAE,CAAC,MAAM,CAAC;QAC3D;YACE,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,oCAAoC;YAC7C,OAAO,EAAE,OAAO;SACjB;KACF,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,KAAK,CAAA;AACrB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,WAAmB;IACrD,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC;QAC5B;YACE,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,UAAU;YACnB,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;gBAClB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtB,OAAO,yBAAyB,CAAA;iBACjC;gBACD,IAAI,KAAK,CAAC,MAAM,GAAG,EAAE,EAAE;oBACrB,OAAO,0CAA0C,CAAA;iBAClD;gBACD,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;oBAC7B,OAAO,oDAAoD,CAAA;iBAC5D;gBACD,OAAO,IAAI,CAAA;YACb,CAAC;SACF;KACF,CAAC,CAAA;IACF,OAAO,KAAK,CAAC,IAAI,CAAA;AACnB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,GAAiB;IAC3D,MAAM,OAAO,GAAG;QACd,EAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,YAAY,sBAAsB,EAAE,KAAK,EAAE,QAAQ,EAAC;QACvE,EAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,EAAE,QAAQ,EAAC;KAC1C,CAAA;IAED,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC;QAC7B;YACE,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,gCAAgC;YACzC,OAAO,EAAE,OAAO;SACjB;KACF,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAA;AAClC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB;IACxC,MAAM,OAAO,GAAG;QACd,EAAC,IAAI,EAAE,6BAA6B,EAAE,KAAK,EAAE,KAAK,EAAC;QACnD,EAAC,IAAI,EAAE,mCAAmC,EAAE,KAAK,EAAE,QAAQ,EAAC;KAC7D,CAAA;IAED,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC;QAC7B;YACE,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,8CAA8C;YACvD,OAAO,EAAE,OAAO;SACjB;KACF,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,KAAK,KAAK,KAAK,CAAA;AAC/B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB;IACxC,MAAM,OAAO,GAAG;QACd,EAAC,IAAI,EAAE,6BAA6B,EAAE,KAAK,EAAE,KAAK,EAAC;QACnD,EAAC,IAAI,EAAE,gCAAgC,EAAE,KAAK,EAAE,QAAQ,EAAC;KAC1D,CAAA;IAED,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC;QAC7B;YACE,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,qDAAqD;YAC9D,OAAO,EAAE,OAAO;SACjB;KACF,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,KAAK,KAAK,KAAK,CAAA;AAC/B,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,aAAqB,EAAE,mBAA6B;IACnF,MAAM,OAAO,GAAG;QACd,EAAC,KAAK,EAAE,mBAAmB,EAAE,KAAK,EAAE,QAAQ,EAAC;QAC7C,EAAC,KAAK,EAAE,gBAAgB,EAAE,KAAK,EAAE,KAAK,EAAC;QACvC,EAAC,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,IAAI,EAAC;QACnC,EAAC,KAAK,EAAE,wBAAwB,EAAE,KAAK,EAAE,OAAO,EAAC;KAClD,CAAA;IAED,MAAM,SAAS,GAAG;QAChB,iBAAiB,EAAE,CAAC,aAAa,CAAC;QAClC,uBAAuB,EAAE,mBAAmB;KAC7C,CAAA;IAED,OAAO,kBAAkB,CAAC;QACxB,OAAO,EAAE,2FAA2F;QACpG,OAAO;QACP,SAAS;KACV,CAAC,CAAA;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB;IAC7C,MAAM,OAAO,GAAG;QACd,EAAC,IAAI,EAAE,0BAA0B,EAAE,KAAK,EAAE,QAAQ,EAAC;QACnD,EAAC,IAAI,EAAE,iCAAiC,EAAE,KAAK,EAAE,KAAK,EAAC;QACvD,EAAC,IAAI,EAAE,uBAAuB,EAAE,KAAK,EAAE,QAAQ,EAAC;KACjD,CAAA;IAED,MAAM,MAAM,GAAyC,MAAM,EAAE,CAAC,MAAM,CAAC;QACnE;YACE,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,uDAAuD;YAChE,OAAO,EAAE,OAAO;SACjB;KACF,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,KAAK,CAAA;AACrB,CAAC","sourcesContent":["import {Organization, MinimalOrganizationApp, OrganizationStore} from '../models/organization.js'\nimport {fetchOrgAndApps} from '../services/dev/fetch.js'\nimport {output, ui} from '@shopify/cli-kit'\nimport {renderAutocompletePrompt, renderSelectPrompt} from '@shopify/cli-kit/node/ui'\n\nexport async function selectOrganizationPrompt(organizations: Organization[]): Promise<Organization> {\n  if (organizations.length === 1) {\n    return organizations[0]!\n  }\n  const orgList = organizations.map((org) => ({name: org.businessName, value: org.id}))\n  const choice = await ui.prompt([\n    {\n      type: 'autocomplete',\n      name: 'id',\n      message: 'Which Partners organization is this work for?',\n      choices: orgList,\n    },\n  ])\n  return organizations.find((org) => org.id === choice.id)!\n}\n\nexport async function selectAppPrompt(apps: MinimalOrganizationApp[], orgId: string, token: string): Promise<string> {\n  const toAnswer = (app: MinimalOrganizationApp) => ({label: app.title, value: app.apiKey})\n  const appList = apps.map(toAnswer)\n\n  return renderAutocompletePrompt({\n    message: 'Which existing app is this for?',\n    choices: appList,\n    search: async (term) => {\n      const result = await fetchOrgAndApps(orgId, token, term)\n\n      return result.apps.map(toAnswer)\n    },\n  })\n}\n\nexport async function selectStorePrompt(stores: OrganizationStore[]): Promise<OrganizationStore | undefined> {\n  if (stores.length === 0) return undefined\n  if (stores.length === 1) {\n    output.completed(`Using your default dev store (${stores[0]!.shopName}) to preview your project.`)\n    return stores[0]\n  }\n  const storeList = stores.map((store) => ({name: store.shopName, value: store.shopId}))\n\n  const choice = await ui.prompt([\n    {\n      type: 'autocomplete',\n      name: 'id',\n      message: 'Which development store would you like to use to view your project?',\n      choices: storeList,\n    },\n  ])\n  return stores.find((store) => store.shopId === choice.id)\n}\n\nexport async function appTypePrompt(): Promise<'public' | 'custom'> {\n  const options = [\n    {name: 'Public: An app built for a wide merchant audience.', value: 'public'},\n    {name: 'Custom: An app custom built for a single client.', value: 'custom'},\n  ]\n\n  const choice: {value: 'public' | 'custom'} = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'What type of app are you building?',\n      choices: options,\n    },\n  ])\n  return choice.value\n}\n\nexport async function appNamePrompt(currentName: string): Promise<string> {\n  const input = await ui.prompt([\n    {\n      type: 'input',\n      name: 'name',\n      message: 'App Name',\n      default: currentName,\n      validate: (value) => {\n        if (value.length === 0) {\n          return \"App name can't be empty\"\n        }\n        if (value.length > 30) {\n          return 'Enter a shorter name (30 character max.)'\n        }\n        if (value.includes('shopify')) {\n          return 'Name can\\'t contain \"shopify.\" Enter another name.'\n        }\n        return true\n      },\n    },\n  ])\n  return input.name\n}\n\nexport async function reloadStoreListPrompt(org: Organization): Promise<boolean> {\n  const options = [\n    {name: `Yes, ${org.businessName} has a new dev store`, value: 'reload'},\n    {name: 'No, cancel dev', value: 'cancel'},\n  ]\n\n  const choice = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'Finished creating a dev store?',\n      choices: options,\n    },\n  ])\n  return choice.value === 'reload'\n}\n\nexport async function createAsNewAppPrompt(): Promise<boolean> {\n  const options = [\n    {name: 'Yes, create it as a new app', value: 'yes'},\n    {name: 'No, connect it to an existing app', value: 'cancel'},\n  ]\n\n  const choice = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'Create this project as a new app on Shopify?',\n      choices: options,\n    },\n  ])\n  return choice.value === 'yes'\n}\n\nexport async function reuseDevConfigPrompt(): Promise<boolean> {\n  const options = [\n    {name: 'Yes, deploy in the same way', value: 'yes'},\n    {name: 'No, use a different org or app', value: 'cancel'},\n  ]\n\n  const choice = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'Deploy to the same org and app as you used for dev?',\n      choices: options,\n    },\n  ])\n  return choice.value === 'yes'\n}\n\nexport function updateURLsPrompt(currentAppUrl: string, currentRedirectUrls: string[]): Promise<string> {\n  const choices = [\n    {label: 'Always by default', value: 'always'},\n    {label: 'Yes, this time', value: 'yes'},\n    {label: 'No, not now', value: 'no'},\n    {label: `Never, don't ask again`, value: 'never'},\n  ]\n\n  const infoTable = {\n    'Current app URL': [currentAppUrl],\n    'Current redirect URLs': currentRedirectUrls,\n  }\n\n  return renderSelectPrompt({\n    message: `Have Shopify automatically update your app's URL in order to create a preview experience?`,\n    choices,\n    infoTable,\n  })\n}\n\nexport async function tunnelConfigurationPrompt(): Promise<'always' | 'yes' | 'cancel'> {\n  const options = [\n    {name: 'Always use it by default', value: 'always'},\n    {name: 'Use it now and ask me next time', value: 'yes'},\n    {name: 'Nevermind, cancel dev', value: 'cancel'},\n  ]\n\n  const choice: {value: 'always' | 'yes' | 'cancel'} = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'How would you like your tunnel to work in the future?',\n      choices: options,\n    },\n  ])\n  return choice.value\n}\n"]}