{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../src/cli/models/extensions/functions.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseFunctionConfigurationSchema, ZodSchemaType} from './schemas.js'\nimport {ExtensionCategory, GenericSpecification, FunctionExtension} from '../app/extensions.js'\nimport {blocks, defaultFunctionsFlavors} from '../../constants.js'\nimport {schema} from '@shopify/cli-kit/node/schema'\nimport {AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {constantize} from '@shopify/cli-kit/common/string'\nimport {exec} from '@shopify/cli-kit/node/system'\nimport {partnersFqdn} from '@shopify/cli-kit/node/environment/fqdn'\nimport {joinPath, basename} from '@shopify/cli-kit/node/path'\nimport {AbortSilentError} from '@shopify/cli-kit/node/error'\nimport {Writable} from 'stream'\n\n// Base config type that all config schemas must extend\nexport type FunctionConfigType = schema.infer<typeof BaseFunctionConfigurationSchema>\n\n/**\n * Specification with all the needed properties and methods to load a function.\n */\nexport interface FunctionSpec<TConfiguration extends FunctionConfigType = FunctionConfigType>\n  extends GenericSpecification {\n  identifier: string\n  externalIdentifier: string\n  externalName: string\n  helpURL?: string\n  gated: boolean\n  templateURL: string\n  supportedFlavors: {name: string; value: string}[]\n  configSchema: ZodSchemaType<TConfiguration>\n  registrationLimit: number\n  templatePath: (lang: string) => string\n  category: () => ExtensionCategory\n}\n\n/**\n * Class that represents an instance of a local function\n * Before creating this class we've validated that:\n * - There is a spec for this type of function\n * - The Config Schema for that spec is followed by the function config toml file\n *\n * This class holds the public interface to interact with functions\n */\nexport class FunctionInstance<TConfiguration extends FunctionConfigType = FunctionConfigType>\n  implements FunctionExtension\n{\n  idEnvironmentVariableName: string\n  localIdentifier: string\n  directory: string\n  configuration: TConfiguration\n  configurationPath: string\n\n  private specification: FunctionSpec<TConfiguration>\n\n  constructor(options: {\n    configuration: TConfiguration\n    configurationPath: string\n    specification: FunctionSpec<TConfiguration>\n    directory: string\n  }) {\n    this.configuration = options.configuration\n    this.configurationPath = options.configurationPath\n    this.specification = options.specification\n    this.directory = options.directory\n    this.localIdentifier = basename(options.directory)\n    this.idEnvironmentVariableName = `SHOPIFY_${constantize(basename(this.directory))}_ID`\n  }\n\n  get graphQLType() {\n    return this.specification.identifier.toUpperCase()\n  }\n\n  get identifier() {\n    return this.specification.identifier\n  }\n\n  get type() {\n    return this.specification.identifier\n  }\n\n  get externalType() {\n    return this.specification.externalIdentifier\n  }\n\n  get name() {\n    return this.configuration.name\n  }\n\n  inputQueryPath() {\n    return joinPath(this.directory, 'input.graphql')\n  }\n\n  buildWasmPath() {\n    const relativePath = this.configuration.build.path ?? joinPath('dist', 'index.wasm')\n    return joinPath(this.directory, relativePath)\n  }\n\n  async build(stdout: Writable, stderr: Writable, signal: AbortSignal) {\n    const buildCommand = this.configuration.build.command\n    if (!buildCommand || buildCommand.trim() === '') {\n      stderr.write(`The function extension ${this.localIdentifier} doesn't have a build command or it's empty`)\n      stderr.write(`\n      Edit the shopify.function.extension.toml configuration file and set how to build the extension.\n\n      [build]\n      command = \"{COMMAND}\"\n\n      Note that the command must output a dist/index.wasm file.\n      `)\n      throw new AbortSilentError()\n    }\n    const buildCommandComponents = buildCommand.split(' ')\n    stdout.write(`Building function ${this.localIdentifier}...`)\n    await exec(buildCommandComponents[0]!, buildCommandComponents.slice(1), {\n      stdout,\n      stderr,\n      cwd: this.directory,\n      signal,\n    })\n  }\n\n  async publishURL(options: {orgId: string; appId: string}) {\n    const fqdn = await partnersFqdn()\n    return `https://${fqdn}/${options.orgId}/apps/${options.appId}/extensions`\n  }\n}\n\n/**\n * Partial FunctionSpec type used when creating a new FunctionSpec, the only mandatory fields are the identifier and the templatePath\n */\nexport interface CreateFunctionSpecType<TConfiguration extends FunctionConfigType = FunctionConfigType>\n  extends Partial<FunctionSpec<TConfiguration>> {\n  identifier: string\n  templatePath: (lang: string) => string\n}\n\n/**\n * Create a new function spec.\n *\n * Everything but \"identifer\" and \"templatePath\" is optional.\n * ```ts\n * identifier: string // unique identifier for the function type\n * externalIdentifier: string // unique identifier used externally (default: same as \"identifier\")\n * externalName: string // human name used externally (default: same as \"identifier\")\n * helpURL?: string // URL to documentation\n * gated: boolean // whether the function is only accessible to shopifolk or not (default: false)\n * supportedFlavors: {name: string; value: string}[] // list of supported flavors (default: 'wasm' and 'rust')\n * configSchema: ZodSchemaType<TConfiguration> // schema for the function toml file (default: BaseFunctionConfigurationSchema)\n * registrationLimit: number // max number of functions of this type that can be registered (default: 10)\n * templateURL?: string // URL to the functions repository (default: 'https://github.com/Shopify/function-examples')\n * templatePath: (lang: string) => string // path to the template directory for the given language inside the templateURL repo\n * ```\n */\nexport function createFunctionSpecification<TConfiguration extends FunctionConfigType = FunctionConfigType>(\n  spec: CreateFunctionSpecType<TConfiguration>,\n): FunctionSpec {\n  const defaults = {\n    templateURL: 'https://github.com/Shopify/function-examples',\n    externalIdentifier: spec.identifier,\n    externalName: spec.identifier,\n    supportedFlavors: defaultFunctionsFlavors,\n    configSchema: BaseFunctionConfigurationSchema,\n    gated: false,\n    registrationLimit: spec.registrationLimit ?? blocks.functions.defaultRegistrationLimit,\n    category: (): ExtensionCategory => 'function',\n  }\n\n  return {...defaults, ...spec}\n}\n"]}