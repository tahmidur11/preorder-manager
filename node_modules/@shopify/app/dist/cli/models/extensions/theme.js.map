{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../../../src/cli/models/extensions/theme.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,uBAAuB,EAAC,MAAM,qBAAqB,CAAA;AAG3D,OAAO,EAAC,MAAM,EAAC,MAAM,kBAAkB,CAAA;AAEvC,OAAO,EAAC,WAAW,EAAC,MAAM,gCAAgC,CAAA;AAC1D,OAAO,EAAC,YAAY,EAAC,MAAM,wCAAwC,CAAA;AACnE,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AAkBnD;;;;;;GAMG;AACH,MAAM,OAAO,sBAAsB;IAqCjC,YAAY,OAOX;QACC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAA;QAC1C,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAA;QAClD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAA;QAClC,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAA;QACtD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAA;QAC1C,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QAClD,IAAI,CAAC,yBAAyB,GAAG,WAAW,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAA;QACtF,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAA;IAClD,CAAC;IAxCD,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,WAAW,EAAE,CAAA;IACrD,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAA;IACtC,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAA;IACtC,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,mBAAmB,EAAE,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,CAAA;IAClF,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAA;IAChC,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,mBAAmB,EAAE,kBAAkB,IAAI,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAA;IAC9F,CAAC;IAoBD,KAAK,CAAC,UAAU,CAAC,OAA6D;QAC5E,MAAM,IAAI,GAAG,MAAM,YAAY,EAAE,CAAA;QACjC,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAA;QAC5D,OAAO,WAAW,IAAI,IAAI,OAAO,CAAC,KAAK,SAAS,OAAO,CAAC,KAAK,eAAe,WAAW,IAAI,OAAO,CAAC,WAAW,EAAE,CAAA;IAClH,CAAC;IAED,cAAc;QACZ,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,GAAG,CAAC,CAAA;QACxE,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAC5B,sBAAsB,EACtB,qGAAqG,CACtG,CAAA;QACD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAA,cAAc,IAAI,oCAAoC,CAAA;QAEpF,OAAO,MAAM,CAAC,OAAO,CAAA,GAAG,OAAO,KAAK,OAAO,CAAC,KAAK,IAAI,CAAA;IACvD,CAAC;CACF;AAED;GACG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,IAAY;IACjD,OAAO,CAAC,MAAM,uBAAuB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAA;AACnF,CAAC","sourcesContent":["import {ThemeExtensionSchema, ZodSchemaType} from './schemas.js'\nimport {loadThemeSpecifications} from './specifications.js'\nimport {GenericSpecification, ThemeExtension} from '../app/extensions.js'\nimport {RemoteSpecification} from '../../api/graphql/extension_specifications.js'\nimport {output} from '@shopify/cli-kit'\nimport {schema} from '@shopify/cli-kit/node/schema'\nimport {constantize} from '@shopify/cli-kit/common/string'\nimport {partnersFqdn} from '@shopify/cli-kit/node/environment/fqdn'\nimport {basename} from '@shopify/cli-kit/node/path'\n\n// Base config type for a theme extension.\nexport type ThemeConfigContents = schema.infer<typeof ThemeExtensionSchema>\n\nexport interface ThemeExtensionSpec extends GenericSpecification {\n  identifier: 'theme'\n  externalIdentifier: 'theme_app_extension'\n  externalName: 'Theme app extension'\n  supportedFlavors: []\n  registrationLimit: 1\n  gated: false\n  category: () => 'theme'\n  partnersWebIdentifier: 'theme_app_extension'\n  graphQLType: 'theme_app_extension'\n  schema: ZodSchemaType<ThemeConfigContents>\n}\n\n/**\n * Class that represents an instance of a local theme extension\n * Before creating this class we've validated that\n * the config toml file for the theme extension follow the ThemeExtensionSchema\n *\n * This class holds the public interface to interact with theme extensions\n */\nexport class ThemeExtensionInstance<TConfiguration extends ThemeConfigContents = ThemeConfigContents>\n  implements ThemeExtension<TConfiguration>\n{\n  localIdentifier: string\n  idEnvironmentVariableName: string\n  directory: string\n  configuration: TConfiguration\n  configurationPath: string\n  specification: ThemeExtensionSpec\n  outputBundlePath: string\n\n  private remoteSpecification?: RemoteSpecification\n\n  get graphQLType() {\n    return this.specification.graphQLType.toUpperCase()\n  }\n\n  get identifier() {\n    return this.specification.identifier\n  }\n\n  get type() {\n    return this.specification.identifier\n  }\n\n  get humanName() {\n    return this.remoteSpecification?.externalName ?? this.specification.externalName\n  }\n\n  get name() {\n    return this.configuration.name\n  }\n\n  get externalType() {\n    return this.remoteSpecification?.externalIdentifier ?? this.specification.externalIdentifier\n  }\n\n  constructor(options: {\n    configuration: TConfiguration\n    configurationPath: string\n    directory: string\n    remoteSpecification?: RemoteSpecification\n    specification: ThemeExtensionSpec\n    outputBundlePath: string\n  }) {\n    this.configuration = options.configuration\n    this.configurationPath = options.configurationPath\n    this.directory = options.directory\n    this.remoteSpecification = options.remoteSpecification\n    this.specification = options.specification\n    this.localIdentifier = basename(options.directory)\n    this.idEnvironmentVariableName = `SHOPIFY_${constantize(basename(this.directory))}_ID`\n    this.outputBundlePath = options.outputBundlePath\n  }\n\n  async publishURL(options: {orgId: string; appId: string; extensionId?: string}) {\n    const fqdn = await partnersFqdn()\n    const parnersPath = this.specification.partnersWebIdentifier\n    return `https://${fqdn}/${options.orgId}/apps/${options.appId}/extensions/${parnersPath}/${options.extensionId}`\n  }\n\n  previewMessage() {\n    const heading = output.token.heading(`${this.name} (${this.humanName})`)\n    const link = output.token.link(\n      'dev doc instructions',\n      'https://shopify.dev/apps/online-store/theme-app-extensions/getting-started#step-3-test-your-changes',\n    )\n    const message = output.content`Follow the ${link} by deploying your work as a draft`\n\n    return output.content`${heading}\\n${message.value}\\n`\n  }\n}\n\n/* Find the registered spec for a given theme type\n */\nexport async function themeSpecForType(type: string): Promise<ThemeExtensionSpec | undefined> {\n  return (await loadThemeSpecifications()).find((spec) => spec.identifier === type)\n}\n"]}