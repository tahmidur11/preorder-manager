import { output } from '@shopify/cli-kit';
import { Conf } from '@shopify/cli-kit/node/conf';
let _instance;
function appConf() {
    if (!_instance) {
        _instance = new Conf({ projectName: 'shopify-cli-app' });
    }
    return _instance;
}
export function getAppInfo(directory, config = appConf()) {
    output.debug(output.content `Reading cached app information for directory ${output.token.path(directory)}...`);
    return config.get(directory);
}
export function clearAppInfo(directory, config = appConf()) {
    output.debug(output.content `Clearing app information for directory ${output.token.path(directory)}...`);
    config.delete(directory);
}
export function clearAllAppInfo(config = appConf()) {
    output.debug(output.content `Clearing all app information...`);
    config.clear();
}
export function setAppInfo(options, config = appConf()) {
    output.debug(output.content `Storing app information for directory ${output.token.path(options.directory)}:${output.token.json(options)}`);
    const savedApp = config.get(options.directory);
    if (savedApp) {
        config.set(options.directory, {
            directory: options.directory,
            appId: options.appId ?? savedApp.appId,
            title: options.title ?? savedApp.title,
            storeFqdn: options.storeFqdn ?? savedApp.storeFqdn,
            orgId: options.orgId ?? savedApp.orgId,
            updateURLs: options.updateURLs ?? savedApp.updateURLs,
            tunnelPlugin: options.tunnelPlugin ?? savedApp.tunnelPlugin,
        });
    }
    else {
        config.set(options.directory, options);
    }
}
//# sourceMappingURL=conf.js.map