{"version":3,"file":"conf.js","sourceRoot":"","sources":["../../../src/cli/services/conf.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,kBAAkB,CAAA;AACvC,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAA;AAiB/C,IAAI,SAA0C,CAAA;AAE9C,SAAS,OAAO;IACd,IAAI,CAAC,SAAS,EAAE;QACd,SAAS,GAAG,IAAI,IAAI,CAAgB,EAAC,WAAW,EAAE,iBAAiB,EAAC,CAAC,CAAA;KACtE;IACD,OAAO,SAAS,CAAA;AAClB,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,SAAiB,EAAE,SAA8B,OAAO,EAAE;IACnF,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA,gDAAgD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;IAC7G,OAAO,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;AAC9B,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,SAAiB,EAAE,SAA8B,OAAO,EAAE;IACrF,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA,0CAA0C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;IACvG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;AAC1B,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,SAA8B,OAAO,EAAE;IACrE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA,iCAAiC,CAAC,CAAA;IAC7D,MAAM,CAAC,KAAK,EAAE,CAAA;AAChB,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,OAAsB,EAAE,SAA8B,OAAO,EAAE;IACxF,MAAM,CAAC,KAAK,CACV,MAAM,CAAC,OAAO,CAAA,yCAAyC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAC9G,OAAO,CACR,EAAE,CACJ,CAAA;IACD,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IAC9C,IAAI,QAAQ,EAAE;QACZ,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE;YAC5B,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;YACtC,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;YACtC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,QAAQ,CAAC,SAAS;YAClD,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;YACtC,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,QAAQ,CAAC,UAAU;YACrD,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,QAAQ,CAAC,YAAY;SAC5D,CAAC,CAAA;KACH;SAAM;QACL,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;KACvC;AACH,CAAC","sourcesContent":["import {output} from '@shopify/cli-kit'\nimport {Conf} from '@shopify/cli-kit/node/conf'\n\nexport interface CachedAppInfo {\n  directory: string\n  appId?: string\n  title?: string\n  orgId?: string\n  storeFqdn?: string\n  updateURLs?: boolean\n  tunnelPlugin?: string\n}\n\n// We store each app info using the directory as the key\nexport interface AppConfSchema {\n  [key: string]: CachedAppInfo\n}\n\nlet _instance: Conf<AppConfSchema> | undefined\n\nfunction appConf() {\n  if (!_instance) {\n    _instance = new Conf<AppConfSchema>({projectName: 'shopify-cli-app'})\n  }\n  return _instance\n}\n\nexport function getAppInfo(directory: string, config: Conf<AppConfSchema> = appConf()): CachedAppInfo | undefined {\n  output.debug(output.content`Reading cached app information for directory ${output.token.path(directory)}...`)\n  return config.get(directory)\n}\n\nexport function clearAppInfo(directory: string, config: Conf<AppConfSchema> = appConf()): void {\n  output.debug(output.content`Clearing app information for directory ${output.token.path(directory)}...`)\n  config.delete(directory)\n}\n\nexport function clearAllAppInfo(config: Conf<AppConfSchema> = appConf()): void {\n  output.debug(output.content`Clearing all app information...`)\n  config.clear()\n}\n\nexport function setAppInfo(options: CachedAppInfo, config: Conf<AppConfSchema> = appConf()): void {\n  output.debug(\n    output.content`Storing app information for directory ${output.token.path(options.directory)}:${output.token.json(\n      options,\n    )}`,\n  )\n  const savedApp = config.get(options.directory)\n  if (savedApp) {\n    config.set(options.directory, {\n      directory: options.directory,\n      appId: options.appId ?? savedApp.appId,\n      title: options.title ?? savedApp.title,\n      storeFqdn: options.storeFqdn ?? savedApp.storeFqdn,\n      orgId: options.orgId ?? savedApp.orgId,\n      updateURLs: options.updateURLs ?? savedApp.updateURLs,\n      tunnelPlugin: options.tunnelPlugin ?? savedApp.tunnelPlugin,\n    })\n  } else {\n    config.set(options.directory, options)\n  }\n}\n"]}