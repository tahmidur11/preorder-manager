import { buildAppURLForWeb } from '../../utilities/app/app-url.js';
import { partnersFqdn } from '@shopify/cli-kit/node/environment/fqdn';
import { renderInfo } from '@shopify/cli-kit/node/ui';
import { output } from '@shopify/cli-kit';
export async function outputUpdateURLsResult(updated, urls, app) {
    const dashboardURL = await partnersURL(app.organizationId, app.id);
    if (app.newApp) {
        renderInfo({
            headline: `For your convenience, we've given your app a default URL: ${urls.applicationUrl}.`,
            body: `You can update your app's URL anytime in the ${dashboardURL}. But once your app is live, updating its URL will disrupt merchant access.`,
        });
    }
    else if (!updated) {
        renderInfo({
            headline: `To make URL updates manually, you can add the following URLs as redirects in your ${dashboardURL}:`,
            body: { list: { items: urls.redirectUrlWhitelist } },
        });
    }
}
export function outputAppURL(storeFqdn, url) {
    const title = url.includes('localhost') ? 'App URL' : 'Shareable app URL';
    const heading = output.token.heading(title);
    const appURL = buildAppURLForWeb(storeFqdn, url);
    output.info(output.content `\n\n${heading}\n\n  ${appURL}\n`);
}
export function outputDevConsoleURL(url) {
    const title = 'Shopify extension dev console URL';
    const heading = output.token.heading(title);
    const devConsoleURL = `${url}/extensions/dev-console`;
    output.info(output.content `${heading}\n\n  ${devConsoleURL}\n`);
}
export function outputExtensionsMessages(app, storeFqdn, url) {
    outputUIExtensionsURLs(app.extensions.ui, storeFqdn, url);
    outputFunctionsMessage(app.extensions.function);
    outputThemeExtensionsMessage(app.extensions.theme);
}
function outputUIExtensionsURLs(extensions, storeFqdn, url) {
    if (extensions.length > 0) {
        outputDevConsoleURL(url);
    }
    for (const extension of extensions) {
        const message = extension.previewMessage(url, storeFqdn);
        if (message)
            output.info(message);
    }
}
function outputFunctionsMessage(extensions) {
    if (extensions.length === 0)
        return;
    const names = extensions.map((ext) => ext.configuration.name);
    const heading = output.token.heading(names.join(', '));
    const message = `These extensions need to be deployed to be manually tested.
One testing option is to use a separate app dedicated to staging.`;
    output.info(output.content `${heading}\n${message}\n`);
}
function outputThemeExtensionsMessage(extensions) {
    if (extensions.length === 0)
        return;
    for (const extension of extensions) {
        const message = extension.previewMessage('', '');
        if (message)
            output.info(message);
    }
}
async function partnersURL(organizationId, appId) {
    return output.content `${output.token.link(`Partners Dashboard`, `https://${await partnersFqdn()}/${organizationId}/apps/${appId}/edit`)}`.value;
}
//# sourceMappingURL=output.js.map